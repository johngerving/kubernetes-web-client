// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (email) VALUES ($1)
`

func (q *Queries) CreateUser(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, createUser, email)
	return err
}

const findUserWithEmail = `-- name: FindUserWithEmail :one
SELECT id, email FROM users WHERE email = $1
`

func (q *Queries) FindUserWithEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, findUserWithEmail, email)
	var i User
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
